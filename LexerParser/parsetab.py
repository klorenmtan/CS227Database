
# C:\Users\Gladys Tillan\Documents\GitHub\LexerParser\parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '3F454EF38053F668A47A79F4604AC34E'
    
_lr_action_items = {'ALL':([3,54,],[11,11,]),'FROM':([7,8,9,10,11,19,20,45,75,],[13,-13,-40,16,-12,-42,-41,-43,88,]),'GT':([37,39,40,41,42,43,77,78,],[-48,-53,-52,62,-50,-54,-51,-49,]),'LPAREN':([24,29,34,36,39,40,43,46,58,59,61,62,63,64,65,69,71,89,90,92,94,96,99,103,],[36,36,36,36,-53,-52,-54,36,36,36,-39,-38,-37,-36,82,-24,-26,-25,92,92,92,92,36,36,]),'NATURAL':([9,19,20,21,39,40,43,45,68,69,71,89,90,91,],[-40,-42,-41,30,-53,-52,-54,-43,30,-24,-26,-25,30,30,]),'DELETE':([0,],[7,]),'UPDATE':([0,],[6,]),'$end':([1,2,4,5,25,28,35,47,60,67,74,83,],[-1,-3,-2,0,-10,-6,-4,-7,-11,-8,-5,-9,]),'AND':([37,38,39,40,42,43,44,48,53,55,66,69,71,76,77,78,79,80,81,89,90,92,94,96,104,106,],[-48,58,-53,-52,-50,-54,-34,58,58,58,58,-24,-26,-33,-51,-49,-32,58,-35,-25,94,94,94,94,58,58,]),'ID':([3,6,13,14,15,16,17,24,26,29,32,34,36,39,40,43,46,49,50,54,57,58,59,61,62,63,64,65,69,71,73,85,86,88,89,90,92,94,96,99,103,],[9,12,18,19,20,9,22,37,45,37,51,37,37,-53,-52,-54,37,68,69,9,78,37,37,-39,-38,-37,-36,37,-24,-26,22,89,69,9,-25,37,37,37,37,37,37,]),'EOL':([9,18,19,20,21,23,27,31,37,38,39,40,42,43,44,45,48,51,52,53,66,68,69,71,72,76,77,78,79,80,81,84,87,89,90,93,95,97,101,102,105,],[-40,25,-42,-41,28,35,47,-18,-48,60,-53,-52,-50,-54,-34,-43,67,-22,-14,74,83,-16,-24,-26,-23,-33,-51,-49,-32,-31,-35,-17,-15,-25,-19,-21,-30,-20,-27,-28,-29,]),'DOT':([9,19,37,69,],[15,26,57,85,]),'SELECT':([0,36,82,92,],[3,54,54,54,]),'WHERE':([9,18,19,20,21,23,27,31,37,39,40,42,43,45,51,52,68,69,71,72,77,78,81,84,87,89,90,91,93,95,97,98,101,102,105,],[-40,24,-42,-41,29,34,46,-18,-48,-53,-52,-50,-54,-43,-22,-14,-16,-24,-26,-23,-51,-49,-35,-17,-15,-25,-19,99,-21,-30,-20,103,-27,-28,-29,]),'LT':([37,39,40,41,42,43,77,78,],[-48,-53,-52,61,-50,-54,-51,-49,]),'OR':([37,38,39,40,42,43,44,48,53,55,66,69,71,76,77,78,79,80,81,89,90,92,94,96,104,106,],[-48,59,-53,-52,-50,-54,-34,59,59,59,59,-24,-26,-33,-51,-49,-32,-31,-35,-25,96,96,96,96,59,59,]),'NEQ':([37,39,40,41,42,43,77,78,],[-48,-53,-52,63,-50,-54,-51,-49,]),'SET':([12,],[17,]),'RPAREN':([9,19,20,31,37,39,40,42,43,44,45,51,55,56,68,69,71,72,76,77,78,79,80,81,84,89,90,91,93,95,97,98,100,101,102,104,105,106,],[-40,-42,-41,-18,-48,-53,-52,-50,-54,-34,-43,-22,76,77,-16,-24,-26,-23,-33,-51,-49,-32,-31,-35,-17,-25,-19,-44,-21,-30,-20,-45,105,-27,-28,-46,-29,-47,]),'COMMA':([8,9,19,20,21,39,40,43,45,52,91,],[14,-40,-42,-41,14,-53,-52,-54,-43,73,14,]),'DOUBLE':([24,29,33,34,36,39,40,43,46,50,58,59,61,62,63,64,65,69,71,86,89,90,92,94,96,99,103,],[39,39,39,39,39,-53,-52,-54,39,39,39,39,-39,-38,-37,-36,39,-24,-26,39,-25,39,39,39,39,39,39,]),'INT':([24,29,33,34,36,39,40,43,46,50,58,59,61,62,63,64,65,69,71,86,89,90,92,94,96,99,103,],[40,40,40,40,40,-53,-52,-54,40,40,40,40,-39,-38,-37,-36,40,-24,-26,40,-25,40,40,40,40,40,40,]),'JOIN':([9,19,20,21,30,39,40,43,45,51,68,69,71,89,90,91,],[-40,-42,-41,32,49,-53,-52,-54,-43,32,32,-24,-26,-25,32,32,]),'STRING':([24,29,33,34,36,39,40,43,46,50,58,59,61,62,63,64,65,69,71,86,89,90,92,94,96,99,103,],[43,43,43,43,43,-53,-52,-54,43,43,43,43,-39,-38,-37,-36,43,-24,-26,43,-25,43,43,43,43,43,43,]),'EQ':([22,37,39,40,41,42,43,69,70,71,77,78,89,],[33,-48,-53,-52,64,-50,-54,-24,86,-26,-51,-49,-25,]),'ON':([31,51,72,],[50,-22,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'update_statement':([0,],[1,]),'join_clause':([21,68,90,91,],[27,84,97,98,]),'set_clause_list':([17,73,],[23,87,]),'id_list':([3,16,54,88,],[8,21,8,91,]),'select_columns':([3,54,],[10,75,]),'join_value':([50,86,],[70,90,]),'search_condition':([24,29,34,36,46,58,59,99,103,],[38,48,53,55,66,79,80,104,106,]),'join_search_condition':([90,92,94,96,],[93,100,101,102,]),'join_list':([21,51,68,90,91,],[31,72,31,31,31,]),'value':([24,29,34,36,46,58,59,65,90,92,94,96,99,103,],[41,41,41,41,41,41,41,81,41,41,41,41,41,41,]),'select_statement':([0,],[4,]),'statement':([0,],[5,]),'delete_statement':([0,],[2,]),'literal':([24,29,33,34,36,46,50,58,59,65,86,90,92,94,96,99,103,],[42,42,52,42,42,42,71,42,42,42,71,42,42,42,42,42,42,]),'comparison_predicate':([24,29,34,36,46,58,59,90,92,94,96,99,103,],[44,44,44,44,44,44,44,95,95,95,95,44,44,]),'inner_select_statement':([36,82,92,],[56,56,56,]),'comp_op':([41,],[65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> update_statement','statement',1,'p_statement','LexerParser.py',107),
  ('statement -> select_statement','statement',1,'p_statement','LexerParser.py',108),
  ('statement -> delete_statement','statement',1,'p_statement','LexerParser.py',109),
  ('update_statement -> UPDATE ID SET set_clause_list EOL','update_statement',5,'p_update_statement','LexerParser.py',114),
  ('update_statement -> UPDATE ID SET set_clause_list WHERE search_condition EOL','update_statement',7,'p_update_statement','LexerParser.py',115),
  ('select_statement -> SELECT select_columns FROM id_list EOL','select_statement',5,'p_select_statement','LexerParser.py',123),
  ('select_statement -> SELECT select_columns FROM id_list join_clause EOL','select_statement',6,'p_select_statement','LexerParser.py',124),
  ('select_statement -> SELECT select_columns FROM id_list WHERE search_condition EOL','select_statement',7,'p_select_statement','LexerParser.py',125),
  ('select_statement -> SELECT select_columns FROM id_list join_clause WHERE search_condition EOL','select_statement',8,'p_select_statement','LexerParser.py',126),
  ('delete_statement -> DELETE FROM ID EOL','delete_statement',4,'p_delete_statement','LexerParser.py',137),
  ('delete_statement -> DELETE FROM ID WHERE search_condition EOL','delete_statement',6,'p_delete_statement','LexerParser.py',138),
  ('select_columns -> ALL','select_columns',1,'p_select_columns','LexerParser.py',146),
  ('select_columns -> id_list','select_columns',1,'p_select_columns','LexerParser.py',147),
  ('set_clause_list -> ID EQ literal','set_clause_list',3,'p_set_clause_list','LexerParser.py',152),
  ('set_clause_list -> ID EQ literal COMMA set_clause_list','set_clause_list',5,'p_set_clause_list','LexerParser.py',153),
  ('join_clause -> NATURAL JOIN ID','join_clause',3,'p_join_clause','LexerParser.py',161),
  ('join_clause -> NATURAL JOIN ID join_clause','join_clause',4,'p_join_clause','LexerParser.py',162),
  ('join_clause -> join_list','join_clause',1,'p_join_clause','LexerParser.py',163),
  ('join_clause -> join_list ON join_value EQ join_value','join_clause',5,'p_join_clause','LexerParser.py',164),
  ('join_clause -> join_list ON join_value EQ join_value join_clause','join_clause',6,'p_join_clause','LexerParser.py',165),
  ('join_clause -> join_list ON join_value EQ join_value join_search_condition','join_clause',6,'p_join_clause','LexerParser.py',166),
  ('join_list -> JOIN ID','join_list',2,'p_join_list','LexerParser.py',180),
  ('join_list -> JOIN ID join_list','join_list',3,'p_join_list','LexerParser.py',181),
  ('join_value -> ID','join_value',1,'p_join_value','LexerParser.py',189),
  ('join_value -> ID DOT ID','join_value',3,'p_join_value','LexerParser.py',190),
  ('join_value -> literal','join_value',1,'p_join_value','LexerParser.py',191),
  ('join_search_condition -> AND join_search_condition','join_search_condition',2,'p_join_search_condition','LexerParser.py',199),
  ('join_search_condition -> OR join_search_condition','join_search_condition',2,'p_join_search_condition','LexerParser.py',200),
  ('join_search_condition -> LPAREN join_search_condition RPAREN','join_search_condition',3,'p_join_search_condition','LexerParser.py',201),
  ('join_search_condition -> comparison_predicate','join_search_condition',1,'p_join_search_condition','LexerParser.py',202),
  ('search_condition -> search_condition OR search_condition','search_condition',3,'p_search_condition','LexerParser.py',212),
  ('search_condition -> search_condition AND search_condition','search_condition',3,'p_search_condition','LexerParser.py',213),
  ('search_condition -> LPAREN search_condition RPAREN','search_condition',3,'p_search_condition','LexerParser.py',214),
  ('search_condition -> comparison_predicate','search_condition',1,'p_search_condition','LexerParser.py',215),
  ('comparison_predicate -> value comp_op value','comparison_predicate',3,'p_comparison_predicate','LexerParser.py',223),
  ('comp_op -> EQ','comp_op',1,'p_comp_op','LexerParser.py',228),
  ('comp_op -> NEQ','comp_op',1,'p_comp_op','LexerParser.py',229),
  ('comp_op -> GT','comp_op',1,'p_comp_op','LexerParser.py',230),
  ('comp_op -> LT','comp_op',1,'p_comp_op','LexerParser.py',231),
  ('id_list -> ID','id_list',1,'p_id_list','LexerParser.py',236),
  ('id_list -> ID DOT ID','id_list',3,'p_id_list','LexerParser.py',237),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','LexerParser.py',238),
  ('id_list -> id_list COMMA ID DOT ID','id_list',5,'p_id_list','LexerParser.py',239),
  ('inner_select_statement -> SELECT select_columns FROM id_list','inner_select_statement',4,'p_inner_select_statement','LexerParser.py',252),
  ('inner_select_statement -> SELECT select_columns FROM id_list join_clause','inner_select_statement',5,'p_inner_select_statement','LexerParser.py',253),
  ('inner_select_statement -> SELECT select_columns FROM id_list WHERE search_condition','inner_select_statement',6,'p_inner_select_statement','LexerParser.py',254),
  ('inner_select_statement -> SELECT select_columns FROM id_list join_clause WHERE search_condition','inner_select_statement',7,'p_inner_select_statement','LexerParser.py',255),
  ('value -> ID','value',1,'p_value','LexerParser.py',267),
  ('value -> ID DOT ID','value',3,'p_value','LexerParser.py',268),
  ('value -> literal','value',1,'p_value','LexerParser.py',269),
  ('value -> LPAREN inner_select_statement RPAREN','value',3,'p_value','LexerParser.py',270),
  ('literal -> INT','literal',1,'p_literal','LexerParser.py',278),
  ('literal -> DOUBLE','literal',1,'p_literal','LexerParser.py',279),
  ('literal -> STRING','literal',1,'p_literal','LexerParser.py',280),
]
